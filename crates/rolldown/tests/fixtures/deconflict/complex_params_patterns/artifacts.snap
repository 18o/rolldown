---
source: crates/rolldown/tests/common/case.rs
expression: content
input_file: crates/rolldown/tests/fixtures/deconflict/complex_params_patterns
---
# Assets

## main.mjs

```js
import { default as assert } from "assert";
import { __export } from "./_rolldown_runtime.mjs";

// names.js
var names_ns = {};
__export(names_ns, {
	a:() => a,
	b:() => b,
	c:() => c,
	d:() => d,
	e:() => e
});
const [a,b,c,d,e] = ['a2', 'b2', 'c2', 'd2', 'e2'];

// main.js
var main_ns = {};
__export(main_ns, {
	a:() => a$1,
	b:() => b$1,
	c:() => c$1,
	d:() => d$1,
	e:() => e$1
});
const [a$1,b$1,c$1,d$1,e$1] = ['a', 'b', 'c', 'd', 'e'];
function foo(a$1$1, {b$1:b$1$1}, {c$1:c$1$1='c$1'}, {d$1:d$1$1}={
	d$1:'d$1'
}, {e$1:e$1$1=''}={
	e$1:'e$1'
}) {
	return {
		main:[a$1, b$1, c$1, d$1, e$1],
		names:[a, b, c, d, e],
		params:[a$1$1, b$1$1, c$1$1, d$1$1, e$1$1]
	};
}
const ret = foo('a$1', {
	b$1:'b$1'
}, {}, undefined, undefined);
assert.deepStrictEqual(ret.main, ['a', 'b', 'c', 'd', 'e']);
assert.deepStrictEqual(ret.names, ['a2', 'b2', 'c2', 'd2', 'e2']);
assert.deepStrictEqual(ret.params, ['a$1', 'b$1', 'c$1', 'd$1', 'e$1']);

export { a$1 as a, b$1 as b, c$1 as c, d$1 as d, e$1 as e };
```
